{"remainingRequest":"/Users/dusty/Code/parkbench/odin-web/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/dusty/Code/parkbench/odin-web/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/dusty/Code/parkbench/odin-web/node_modules/source-map-loader/index.js!/Users/dusty/Code/parkbench/odin-web/src/utils/routes.js","dependencies":[{"path":"/Users/dusty/Code/parkbench/odin-web/src/utils/routes.js","mtime":1567098716406},{"path":"/Users/dusty/Code/parkbench/odin-web/node_modules/docz/node_modules/cache-loader/dist/cjs.js","mtime":1557854551322},{"path":"/Users/dusty/Code/parkbench/odin-web/node_modules/thread-loader/dist/cjs.js","mtime":1565388327920},{"path":"/Users/dusty/Code/parkbench/odin-web/node_modules/babel-loader/lib/index.js","mtime":1557854551208},{"path":"/Users/dusty/Code/parkbench/odin-web/node_modules/source-map-loader/index.js","mtime":1555547971189}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:KGZ1bmN0aW9uKCl7dmFyIGVudGVyTW9kdWxlPXR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCE9PSd1bmRlZmluZWQnP3JlYWN0SG90TG9hZGVyR2xvYmFsLmVudGVyTW9kdWxlOnVuZGVmaW5lZDtlbnRlck1vZHVsZSYmZW50ZXJNb2R1bGUobW9kdWxlKTt9KSgpO3ZhciBfX3NpZ25hdHVyZV9fPXR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCE9PSd1bmRlZmluZWQnP3JlYWN0SG90TG9hZGVyR2xvYmFsLmRlZmF1bHQuc2lnbmF0dXJlOmZ1bmN0aW9uKGEpe3JldHVybiBhO307aW1wb3J0e3N0cmluZ2lmeX1mcm9tJ3F1ZXJ5LXN0cmluZyc7ZXhwb3J0IHZhciB1c2VyVHlwZXM9eydBdXRvIEF0dGVuZGFudCAtIFN0YW5kYXJkJzonYXV0b0F0dGVuZGFudHMvYXV0b0F0dGVuZGFudCcsJ0F1dG8gQXR0ZW5kYW50IC0gVmlkZW8nOidhdXRvQXR0ZW5kYW50cy9hdXRvQXR0ZW5kYW50JywnQXV0byBBdHRlbmRhbnQnOidhdXRvQXR0ZW5kYW50cy9hdXRvQXR0ZW5kYW50JywnQnJvYWRXb3JrcyBBbnl3aGVyZSBQb3J0YWwnOm51bGwsJ0Jyb2FkV29ya3MgQW55d2hlcmUnOm51bGwsJ0NhbGwgQ2VudGVyIC0gQmFzaWMnOidjYWxsQ2VudGVycy9jYWxsQ2VudGVyJywnQ2FsbCBDZW50ZXIgLSBQcmVtaXVtJzonY2FsbENlbnRlcnMvY2FsbENlbnRlcicsJ0NhbGwgQ2VudGVyIC0gU3RhbmRhcmQnOidjYWxsQ2VudGVycy9jYWxsQ2VudGVyJywnQ2FsbCBDZW50ZXInOidjYWxsQ2VudGVycy9jYWxsQ2VudGVyJywnQ29sbGFib3JhdGUgQnJpZGdlJzonY29sbGFib3JhdGUvYnJpZGdlJywnRmluZC1tZS9Gb2xsb3ctbWUnOm51bGwsJ0ZsZXhpYmxlIFNlYXRpbmcgSG9zdCc6bnVsbCwnR3JvdXAgUGFnaW5nJzoncGFnaW5nL2dyb3VwJywnSHVudCBHcm91cCc6J2h1bnRHcm91cHMvaHVudEdyb3VwJywnSW5zdGFudCBDb25mZXJlbmNlIEJyaWRnZSc6bnVsbCwnSW5zdGFudCBHcm91cCBDYWxsJzpudWxsLCdNZWV0LU1lIENvbmZlcmVuY2UgQnJpZGdlJzonbWVldE1lL2JyaWRnZScsJ01lZXQtTWUgQ29uZmVyZW5jaW5nJzonbWVldE1lL2JyaWRnZScsJ011c2ljIE9uIEhvbGQnOm51bGwsJ05vcm1hbCc6J3VzZXJzJywnUm91dGUgUG9pbnQnOm51bGwsJ1ZvaWNlIE1lc3NhZ2luZyc6bnVsbCwnVm9pY2VYTUwnOm51bGx9O2lmKHR5cGVvZiB1c2VyVHlwZXMhPT0ndW5kZWZpbmVkJyYmdXNlclR5cGVzJiZ1c2VyVHlwZXM9PT1PYmplY3QodXNlclR5cGVzKSYmT2JqZWN0LmlzRXh0ZW5zaWJsZSh1c2VyVHlwZXMpKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodXNlclR5cGVzLCdfX2ZpbGVtZXRhJyx7ZW51bWVyYWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlLHZhbHVlOntuYW1lOiJ1c2VyVHlwZXMiLGZpbGVuYW1lOiJzcmMvdXRpbHMvcm91dGVzLmpzIn19KTt9ZXhwb3J0IHZhciB1c2VyUGF0aD1mdW5jdGlvbiB1c2VyUGF0aCh1c2VyLHR5cGUpe3ZhciB1c2VyVHlwZT10eXBlfHx1c2VyLnVzZXJUeXBlfHx1c2VyLnNlcnZpY2VUeXBlfHwnTm9ybWFsJzt2YXIgcGF0aD11c2VyVHlwZXNbdXNlclR5cGVdO2lmKCFwYXRoKXJldHVybjtpZihwYXRoPT09J3VzZXJzJyl7cmV0dXJuIi91c2Vycy8iLmNvbmNhdCh1c2VyLnNlcnZpY2VQcm92aWRlcklkLCIvIikuY29uY2F0KHVzZXIuZ3JvdXBJZCwiLyIpLmNvbmNhdCh1c2VyLnVzZXJJZCk7fWVsc2V7cmV0dXJuIi9ncm91cHMvIi5jb25jYXQodXNlci5zZXJ2aWNlUHJvdmlkZXJJZCwiLyIpLmNvbmNhdCh1c2VyLmdyb3VwSWQsIi8iKS5jb25jYXQocGF0aCwiPyIpLmNvbmNhdChzdHJpbmdpZnkoe3NlcnZpY2VVc2VySWQ6dXNlci51c2VySWR9KSk7fX07aWYodHlwZW9mIHVzZXJQYXRoIT09J3VuZGVmaW5lZCcmJnVzZXJQYXRoJiZ1c2VyUGF0aD09PU9iamVjdCh1c2VyUGF0aCkmJk9iamVjdC5pc0V4dGVuc2libGUodXNlclBhdGgpKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodXNlclBhdGgsJ19fZmlsZW1ldGEnLHtlbnVtZXJhYmxlOnRydWUsY29uZmlndXJhYmxlOnRydWUsdmFsdWU6e25hbWU6InVzZXJQYXRoIixmaWxlbmFtZToic3JjL3V0aWxzL3JvdXRlcy5qcyJ9fSk7fWV4cG9ydCB2YXIgZ3JvdXBQYXRoPWZ1bmN0aW9uIGdyb3VwUGF0aChncm91cCl7cmV0dXJuIi9ncm91cHMvIi5jb25jYXQoZ3JvdXAuc2VydmljZVByb3ZpZGVySWQsIi8iKS5jb25jYXQoZ3JvdXAuZ3JvdXBJZCk7fTtpZih0eXBlb2YgZ3JvdXBQYXRoIT09J3VuZGVmaW5lZCcmJmdyb3VwUGF0aCYmZ3JvdXBQYXRoPT09T2JqZWN0KGdyb3VwUGF0aCkmJk9iamVjdC5pc0V4dGVuc2libGUoZ3JvdXBQYXRoKSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGdyb3VwUGF0aCwnX19maWxlbWV0YScse2VudW1lcmFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZSx2YWx1ZTp7bmFtZToiZ3JvdXBQYXRoIixmaWxlbmFtZToic3JjL3V0aWxzL3JvdXRlcy5qcyJ9fSk7fWV4cG9ydCB2YXIgc2VydmljZVByb3ZpZGVyUGF0aD1mdW5jdGlvbiBzZXJ2aWNlUHJvdmlkZXJQYXRoKHNlcnZpY2VQcm92aWRlcil7cmV0dXJuIi9zZXJ2aWNlUHJvdmlkZXJzLyIuY29uY2F0KHNlcnZpY2VQcm92aWRlci5zZXJ2aWNlUHJvdmlkZXJJZCk7fTtpZih0eXBlb2Ygc2VydmljZVByb3ZpZGVyUGF0aCE9PSd1bmRlZmluZWQnJiZzZXJ2aWNlUHJvdmlkZXJQYXRoJiZzZXJ2aWNlUHJvdmlkZXJQYXRoPT09T2JqZWN0KHNlcnZpY2VQcm92aWRlclBhdGgpJiZPYmplY3QuaXNFeHRlbnNpYmxlKHNlcnZpY2VQcm92aWRlclBhdGgpKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoc2VydmljZVByb3ZpZGVyUGF0aCwnX19maWxlbWV0YScse2VudW1lcmFibGU6dHJ1ZSxjb25maWd1cmFibGU6dHJ1ZSx2YWx1ZTp7bmFtZToic2VydmljZVByb3ZpZGVyUGF0aCIsZmlsZW5hbWU6InNyYy91dGlscy9yb3V0ZXMuanMifX0pO312YXIgX2RlZmF1bHQ9e3VzZXJUeXBlczp1c2VyVHlwZXMsdXNlclBhdGg6dXNlclBhdGgsZ3JvdXBQYXRoOmdyb3VwUGF0aCxzZXJ2aWNlUHJvdmlkZXJQYXRoOnNlcnZpY2VQcm92aWRlclBhdGh9O2V4cG9ydCBkZWZhdWx0IF9kZWZhdWx0O2lmKHR5cGVvZiBfZGVmYXVsdCE9PSd1bmRlZmluZWQnJiZfZGVmYXVsdCYmX2RlZmF1bHQ9PT1PYmplY3QoX2RlZmF1bHQpJiZPYmplY3QuaXNFeHRlbnNpYmxlKF9kZWZhdWx0KSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KF9kZWZhdWx0LCdfX2ZpbGVtZXRhJyx7ZW51bWVyYWJsZTp0cnVlLGNvbmZpZ3VyYWJsZTp0cnVlLHZhbHVlOntuYW1lOiJfZGVmYXVsdCIsZmlsZW5hbWU6InNyYy91dGlscy9yb3V0ZXMuanMifX0pO307KGZ1bmN0aW9uKCl7dmFyIHJlYWN0SG90TG9hZGVyPXR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCE9PSd1bmRlZmluZWQnP3JlYWN0SG90TG9hZGVyR2xvYmFsLmRlZmF1bHQ6dW5kZWZpbmVkO2lmKCFyZWFjdEhvdExvYWRlcil7cmV0dXJuO31yZWFjdEhvdExvYWRlci5yZWdpc3Rlcih1c2VyVHlwZXMsInVzZXJUeXBlcyIsIi9Vc2Vycy9kdXN0eS9Db2RlL3BhcmtiZW5jaC9vZGluLXdlYi9zcmMvdXRpbHMvcm91dGVzLmpzIik7cmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIodXNlclBhdGgsInVzZXJQYXRoIiwiL1VzZXJzL2R1c3R5L0NvZGUvcGFya2JlbmNoL29kaW4td2ViL3NyYy91dGlscy9yb3V0ZXMuanMiKTtyZWFjdEhvdExvYWRlci5yZWdpc3Rlcihncm91cFBhdGgsImdyb3VwUGF0aCIsIi9Vc2Vycy9kdXN0eS9Db2RlL3BhcmtiZW5jaC9vZGluLXdlYi9zcmMvdXRpbHMvcm91dGVzLmpzIik7cmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIoc2VydmljZVByb3ZpZGVyUGF0aCwic2VydmljZVByb3ZpZGVyUGF0aCIsIi9Vc2Vycy9kdXN0eS9Db2RlL3BhcmtiZW5jaC9vZGluLXdlYi9zcmMvdXRpbHMvcm91dGVzLmpzIik7cmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIoX2RlZmF1bHQsImRlZmF1bHQiLCIvVXNlcnMvZHVzdHkvQ29kZS9wYXJrYmVuY2gvb2Rpbi13ZWIvc3JjL3V0aWxzL3JvdXRlcy5qcyIpO30pKCk7OyhmdW5jdGlvbigpe3ZhciBsZWF2ZU1vZHVsZT10eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwhPT0ndW5kZWZpbmVkJz9yZWFjdEhvdExvYWRlckdsb2JhbC5sZWF2ZU1vZHVsZTp1bmRlZmluZWQ7bGVhdmVNb2R1bGUmJmxlYXZlTW9kdWxlKG1vZHVsZSk7fSkoKTs="},{"version":3,"sources":["/Users/dusty/Code/parkbench/odin-web/src/utils/routes.js"],"names":["stringify","userTypes","userPath","user","type","userType","serviceType","path","serviceProviderId","groupId","userId","serviceUserId","groupPath","group","serviceProviderPath","serviceProvider"],"mappings":"iRAAA,OAASA,SAAT,KAA0B,cAA1B,CAEA,MAAO,IAAMC,CAAAA,SAAS,CAAG,CACvB,4BAA6B,8BADN,CAEvB,yBAA0B,8BAFH,CAGvB,iBAAkB,8BAHK,CAIvB,6BAA8B,IAJP,CAKvB,sBAAuB,IALA,CAMvB,sBAAuB,wBANA,CAOvB,wBAAyB,wBAPF,CAQvB,yBAA0B,wBARH,CASvB,cAAe,wBATQ,CAUvB,qBAAsB,oBAVC,CAWvB,oBAAqB,IAXE,CAYvB,wBAAyB,IAZF,CAavB,eAAgB,cAbO,CAcvB,aAAc,sBAdS,CAevB,4BAA6B,IAfN,CAgBvB,qBAAsB,IAhBC,CAiBvB,4BAA6B,eAjBN,CAkBvB,uBAAwB,eAlBD,CAmBvB,gBAAiB,IAnBM,CAoBvB,SAAU,OApBa,CAqBvB,cAAe,IArBQ,CAsBvB,kBAAmB,IAtBI,CAuBvB,WAAY,IAvBW,CAAlB,C,wPA0BP,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,IAAD,CAAOC,IAAP,CAAgB,CACtC,GAAMC,CAAAA,QAAQ,CAAGD,IAAI,EAAID,IAAI,CAACE,QAAb,EAAyBF,IAAI,CAACG,WAA9B,EAA6C,QAA9D,CACA,GAAMC,CAAAA,IAAI,CAAGN,SAAS,CAACI,QAAD,CAAtB,CACA,GAAI,CAACE,IAAL,CAAW,OACX,GAAIA,IAAI,GAAK,OAAb,CAAsB,CACpB,uBAAiBJ,IAAI,CAACK,iBAAtB,aAA2CL,IAAI,CAACM,OAAhD,aAA2DN,IAAI,CAACO,MAAhE,EACD,CAFD,IAEO,CACL,wBAAkBP,IAAI,CAACK,iBAAvB,aACEL,IAAI,CAACM,OADP,aAEIF,IAFJ,aAEYP,SAAS,CAAC,CAAEW,aAAa,CAAER,IAAI,CAACO,MAAtB,CAAD,CAFrB,EAGD,CACF,CAXM,C,iPAaP,MAAO,IAAME,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAAAC,KAAK,CAAI,CAChC,wBAAkBA,KAAK,CAACL,iBAAxB,aAA6CK,KAAK,CAACJ,OAAnD,EACD,CAFM,C,wPAIP,MAAO,IAAMK,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAAAC,eAAe,CAAI,CACpD,kCAA4BA,eAAe,CAACP,iBAA5C,EACD,CAFM,C,2UAIQ,CAAEP,SAAS,CAATA,SAAF,CAAaC,QAAQ,CAARA,QAAb,CAAuBU,SAAS,CAATA,SAAvB,CAAkCE,mBAAmB,CAAnBA,mBAAlC,C,CAAf,wB,sZA/Cab,S,iGA0BAC,Q,gGAaAU,S,iGAIAE,mB","sourcesContent":["import { stringify } from 'query-string'\n\nexport const userTypes = {\n  'Auto Attendant - Standard': 'autoAttendants/autoAttendant',\n  'Auto Attendant - Video': 'autoAttendants/autoAttendant',\n  'Auto Attendant': 'autoAttendants/autoAttendant',\n  'BroadWorks Anywhere Portal': null,\n  'BroadWorks Anywhere': null,\n  'Call Center - Basic': 'callCenters/callCenter',\n  'Call Center - Premium': 'callCenters/callCenter',\n  'Call Center - Standard': 'callCenters/callCenter',\n  'Call Center': 'callCenters/callCenter',\n  'Collaborate Bridge': 'collaborate/bridge',\n  'Find-me/Follow-me': null,\n  'Flexible Seating Host': null,\n  'Group Paging': 'paging/group',\n  'Hunt Group': 'huntGroups/huntGroup',\n  'Instant Conference Bridge': null,\n  'Instant Group Call': null,\n  'Meet-Me Conference Bridge': 'meetMe/bridge',\n  'Meet-Me Conferencing': 'meetMe/bridge',\n  'Music On Hold': null,\n  'Normal': 'users',\n  'Route Point': null,\n  'Voice Messaging': null,\n  'VoiceXML': null\n}\n\nexport const userPath = (user, type) => {\n  const userType = type || user.userType || user.serviceType || 'Normal'\n  const path = userTypes[userType]\n  if (!path) return\n  if (path === 'users') {\n    return `/users/${user.serviceProviderId}/${user.groupId}/${user.userId}`\n  } else {\n    return `/groups/${user.serviceProviderId}/${\n      user.groupId\n    }/${path}?${stringify({ serviceUserId: user.userId })}`\n  }\n}\n\nexport const groupPath = group => {\n  return `/groups/${group.serviceProviderId}/${group.groupId}`\n}\n\nexport const serviceProviderPath = serviceProvider => {\n  return `/serviceProviders/${serviceProvider.serviceProviderId}`\n}\n\nexport default { userTypes, userPath, groupPath, serviceProviderPath }\n"]}]}