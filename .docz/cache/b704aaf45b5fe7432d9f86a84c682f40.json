{"remainingRequest":"/Users/dusty/Code/parkbench/odin-web/node_modules/thread-loader/dist/cjs.js??ref--5-1!/Users/dusty/Code/parkbench/odin-web/node_modules/babel-loader/lib/index.js??ref--5-2!/Users/dusty/Code/parkbench/odin-web/node_modules/source-map-loader/index.js!/Users/dusty/Code/parkbench/odin-web/src/utils/use-form.js","dependencies":[{"path":"/Users/dusty/Code/parkbench/odin-web/src/utils/use-form.js","mtime":1566267443462},{"path":"/Users/dusty/Code/parkbench/odin-web/node_modules/docz/node_modules/cache-loader/dist/cjs.js","mtime":1557854551322},{"path":"/Users/dusty/Code/parkbench/odin-web/node_modules/thread-loader/dist/cjs.js","mtime":1565388327920},{"path":"/Users/dusty/Code/parkbench/odin-web/node_modules/babel-loader/lib/index.js","mtime":1557854551208},{"path":"/Users/dusty/Code/parkbench/odin-web/node_modules/source-map-loader/index.js","mtime":1555547971189}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICIvVXNlcnMvZHVzdHkvQ29kZS9wYXJrYmVuY2gvb2Rpbi13ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5IjsKaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvVXNlcnMvZHVzdHkvQ29kZS9wYXJrYmVuY2gvb2Rpbi13ZWIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5IjsKaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gIi9Vc2Vycy9kdXN0eS9Db2RlL3BhcmtiZW5jaC9vZGluLXdlYi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheSI7CgooZnVuY3Rpb24gKCkgewogIHZhciBlbnRlck1vZHVsZSA9IHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbC5lbnRlck1vZHVsZSA6IHVuZGVmaW5lZDsKICBlbnRlck1vZHVsZSAmJiBlbnRlck1vZHVsZShtb2R1bGUpOwp9KSgpOwoKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH0KCmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9Cgp2YXIgX19zaWduYXR1cmVfXyA9IHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbC5kZWZhdWx0LnNpZ25hdHVyZSA6IGZ1bmN0aW9uIChhKSB7CiAgcmV0dXJuIGE7Cn07CgppbXBvcnQgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JzsKZXhwb3J0IHZhciB1c2VGb3JtID0gZnVuY3Rpb24gdXNlRm9ybShpbml0aWFsU3RhdGUsIGZvcm1SZWYpIHsKICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUoZmFsc2UpLAogICAgICBfdXNlU3RhdGUyID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlLCAyKSwKICAgICAgaXNWYWxpZCA9IF91c2VTdGF0ZTJbMF0sCiAgICAgIHNldFZhbGlkID0gX3VzZVN0YXRlMlsxXTsKCiAgdmFyIF91c2VTdGF0ZTMgPSB1c2VTdGF0ZSh7fSksCiAgICAgIF91c2VTdGF0ZTQgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUzLCAyKSwKICAgICAgZXJyb3JzID0gX3VzZVN0YXRlNFswXSwKICAgICAgc2V0RXJyb3JzID0gX3VzZVN0YXRlNFsxXTsKCiAgdmFyIF91c2VTdGF0ZTUgPSB1c2VTdGF0ZShpbml0aWFsU3RhdGUpLAogICAgICBfdXNlU3RhdGU2ID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlNSwgMiksCiAgICAgIGZvcm0gPSBfdXNlU3RhdGU2WzBdLAogICAgICBzZXRGb3JtID0gX3VzZVN0YXRlNlsxXTsKCiAgdmFyIGNoZWNrVmFsaWRpdHkgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7CiAgICBpZiAoZm9ybVJlZiAmJiBmb3JtUmVmLmN1cnJlbnQpIHsKICAgICAgdmFyIHZhbGlkaXR5ID0gZm9ybVJlZi5jdXJyZW50LmNoZWNrVmFsaWRpdHkoKTsKICAgICAgdmFyIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKGZvcm1SZWYuY3VycmVudCk7CgogICAgICB2YXIgbmV3RXJyb3JzID0gX3RvQ29uc3VtYWJsZUFycmF5KGZvcm1EYXRhLmtleXMoKSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkgewogICAgICAgIGFjY1trZXldID0gZm9ybVJlZi5jdXJyZW50LmVsZW1lbnRzW2tleV0udmFsaWRhdGlvbk1lc3NhZ2U7CiAgICAgICAgcmV0dXJuIGFjYzsKICAgICAgfSwge30pOwoKICAgICAgc2V0VmFsaWQodmFsaWRpdHkpOwogICAgICBzZXRFcnJvcnMobmV3RXJyb3JzKTsKICAgIH0KICB9LCBbZm9ybVJlZl0pOyAvLyByZS1ydW4gY2hlY2tWYWxpZGl0eSB3aGVuIHRoZSBmb3JtIG9iamVjdCBpcyBjaGFuZ2VkCiAgLy8gZm9yIGV4YW1wbGUsIHdoZW4gc2VsZWN0aW5nIGEgcm93IGluIGEgdGFibGUKCiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBjaGVja1ZhbGlkaXR5KCk7CiAgfSwgW2NoZWNrVmFsaWRpdHksIGZvcm1dKTsKCiAgdmFyIG9uQ2hhbmdlID0gZnVuY3Rpb24gb25DaGFuZ2UoX3JlZikgewogICAgdmFyIHRhcmdldCA9IF9yZWYudGFyZ2V0OwogICAgdmFyIG5hbWUgPSB0YXJnZXQubmFtZTsKICAgIHZhciB2YWx1ZSA9IHRhcmdldC50eXBlID09PSAnY2hlY2tib3gnID8gdGFyZ2V0LmNoZWNrZWQgOiB0YXJnZXQudmFsdWU7CiAgICBjaGVja1ZhbGlkaXR5KCk7CiAgICBzZXRGb3JtKF9vYmplY3RTcHJlYWQoe30sIGZvcm0sIF9kZWZpbmVQcm9wZXJ0eSh7fSwgbmFtZSwgdmFsdWUpKSk7CiAgfTsKCiAgcmV0dXJuIHsKICAgIGZvcm06IGZvcm0sCiAgICBzZXRGb3JtOiBzZXRGb3JtLAogICAgb25DaGFuZ2U6IG9uQ2hhbmdlLAogICAgaXNWYWxpZDogaXNWYWxpZCwKICAgIGVycm9yczogZXJyb3JzCiAgfTsKfTsKCl9fc2lnbmF0dXJlX18odXNlRm9ybSwgInVzZVN0YXRle1tpc1ZhbGlkLCBzZXRWYWxpZF0oZmFsc2UpfVxudXNlU3RhdGV7W2Vycm9ycywgc2V0RXJyb3JzXSh7fSl9XG51c2VTdGF0ZXtbZm9ybSwgc2V0Rm9ybV0oaW5pdGlhbFN0YXRlKX1cbnVzZUNhbGxiYWNre2NoZWNrVmFsaWRpdHl9XG51c2VFZmZlY3R7fSIpOwoKaWYgKHR5cGVvZiB1c2VGb3JtICE9PSAndW5kZWZpbmVkJyAmJiB1c2VGb3JtICYmIHVzZUZvcm0gPT09IE9iamVjdCh1c2VGb3JtKSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKHVzZUZvcm0pKSB7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHVzZUZvcm0sICdfX2ZpbGVtZXRhJywgewogICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIHZhbHVlOiB7CiAgICAgIG5hbWU6ICJ1c2VGb3JtIiwKICAgICAgZmlsZW5hbWU6ICJzcmMvdXRpbHMvdXNlLWZvcm0uanMiCiAgICB9CiAgfSk7Cn0KCjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIHJlYWN0SG90TG9hZGVyID0gdHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsLmRlZmF1bHQgOiB1bmRlZmluZWQ7CgogIGlmICghcmVhY3RIb3RMb2FkZXIpIHsKICAgIHJldHVybjsKICB9CgogIHJlYWN0SG90TG9hZGVyLnJlZ2lzdGVyKHVzZUZvcm0sICJ1c2VGb3JtIiwgIi9Vc2Vycy9kdXN0eS9Db2RlL3BhcmtiZW5jaC9vZGluLXdlYi9zcmMvdXRpbHMvdXNlLWZvcm0uanMiKTsKfSkoKTsKCjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIGxlYXZlTW9kdWxlID0gdHlwZW9mIHJlYWN0SG90TG9hZGVyR2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IHJlYWN0SG90TG9hZGVyR2xvYmFsLmxlYXZlTW9kdWxlIDogdW5kZWZpbmVkOwogIGxlYXZlTW9kdWxlICYmIGxlYXZlTW9kdWxlKG1vZHVsZSk7Cn0pKCk7"},{"version":3,"sources":["/Users/dusty/Code/parkbench/odin-web/src/utils/use-form.js"],"names":["useState","useEffect","useCallback","useForm","initialState","formRef","isValid","setValid","errors","setErrors","form","setForm","checkValidity","current","validity","formData","FormData","newErrors","keys","reduce","acc","key","elements","validationMessage","onChange","target","name","value","type","checked"],"mappings":";;;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AAEA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,YAAD,EAAeC,OAAf,EAA2B;AAAA,kBACpBL,QAAQ,CAAC,KAAD,CADY;AAAA;AAAA,MACzCM,OADyC;AAAA,MAChCC,QADgC;;AAAA,mBAEpBP,QAAQ,CAAC,EAAD,CAFY;AAAA;AAAA,MAEzCQ,MAFyC;AAAA,MAEjCC,SAFiC;;AAAA,mBAGxBT,QAAQ,CAACI,YAAD,CAHgB;AAAA;AAAA,MAGzCM,IAHyC;AAAA,MAGnCC,OAHmC;;AAIhD,MAAMC,aAAa,GAAGV,WAAW,CAAC,YAAM;AACtC,QAAIG,OAAO,IAAIA,OAAO,CAACQ,OAAvB,EAAgC;AAC9B,UAAMC,QAAQ,GAAGT,OAAO,CAACQ,OAAR,CAAgBD,aAAhB,EAAjB;AACA,UAAMG,QAAQ,GAAG,IAAIC,QAAJ,CAAaX,OAAO,CAACQ,OAArB,CAAjB;;AACA,UAAMI,SAAS,GAAG,mBAAIF,QAAQ,CAACG,IAAT,EAAJ,EAAqBC,MAArB,CAA4B,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC1DD,QAAAA,GAAG,CAACC,GAAD,CAAH,GAAWhB,OAAO,CAACQ,OAAR,CAAgBS,QAAhB,CAAyBD,GAAzB,EAA8BE,iBAAzC;AACA,eAAOH,GAAP;AACD,OAHiB,EAGf,EAHe,CAAlB;;AAIAb,MAAAA,QAAQ,CAACO,QAAD,CAAR;AACAL,MAAAA,SAAS,CAACQ,SAAD,CAAT;AACD;AACF,GAXgC,EAW9B,CAACZ,OAAD,CAX8B,CAAjC,CAJgD,CAgBhD;AACA;;AACAJ,EAAAA,SAAS,CAAC;AAAA,WAAMW,aAAa,EAAnB;AAAA,GAAD,EAAwB,CAACA,aAAD,EAAgBF,IAAhB,CAAxB,CAAT;;AACA,MAAMc,QAAQ,GAAG,SAAXA,QAAW,OAAgB;AAAA,QAAbC,MAAa,QAAbA,MAAa;AAC/B,QAAMC,IAAI,GAAGD,MAAM,CAACC,IAApB;AACA,QAAMC,KAAK,GAAGF,MAAM,CAACG,IAAP,KAAgB,UAAhB,GAA6BH,MAAM,CAACI,OAApC,GAA8CJ,MAAM,CAACE,KAAnE;AACAf,IAAAA,aAAa;AACbD,IAAAA,OAAO,mBAAMD,IAAN,sBAAagB,IAAb,EAAoBC,KAApB,GAAP;AACD,GALD;;AAMA,SAAO;AAAEjB,IAAAA,IAAI,EAAJA,IAAF;AAAQC,IAAAA,OAAO,EAAPA,OAAR;AAAiBa,IAAAA,QAAQ,EAARA,QAAjB;AAA2BlB,IAAAA,OAAO,EAAPA,OAA3B;AAAoCE,IAAAA,MAAM,EAANA;AAApC,GAAP;AACD,CA1BM;;cAAML,O;;;;;;;;;;;;;;;;;;;;;;0BAAAA,O","sourcesContent":["import { useState, useEffect, useCallback } from 'react'\n\nexport const useForm = (initialState, formRef) => {\n  const [isValid, setValid] = useState(false)\n  const [errors, setErrors] = useState({})\n  const [form, setForm] = useState(initialState)\n  const checkValidity = useCallback(() => {\n    if (formRef && formRef.current) {\n      const validity = formRef.current.checkValidity()\n      const formData = new FormData(formRef.current)\n      const newErrors = [...formData.keys()].reduce((acc, key) => {\n        acc[key] = formRef.current.elements[key].validationMessage\n        return acc\n      }, {})\n      setValid(validity)\n      setErrors(newErrors)\n    }\n  }, [formRef])\n  // re-run checkValidity when the form object is changed\n  // for example, when selecting a row in a table\n  useEffect(() => checkValidity(), [checkValidity, form])\n  const onChange = ({ target }) => {\n    const name = target.name\n    const value = target.type === 'checkbox' ? target.checked : target.value\n    checkValidity()\n    setForm({ ...form, [name]: value })\n  }\n  return { form, setForm, onChange, isValid, errors }\n}\n"]}]}